# # Problem 2

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import time
import sys

sys.path.append("../..")
from utils.log import MarkdownLogger


def run():
    fib_seq = [1, 2]
    total = 2  # sum manually 2 as it's an even number

    while True:
        new_number = int(fib_seq[-2] + fib_seq[-1])

        if new_number <= 4000000:
            fib_seq.append(new_number)
            if new_number % 2 == 0:
                total += new_number

        else:
            break

    print(f"Fibonacci sequence under four million:\n{fib_seq}\n")
    print("Answer:", total)
    return total


if __name__ == "__main__":
    logger = MarkdownLogger(last_problem=723)
    problem_id = int(sys.argv[0].split("m")[1].split(".")[0])
    startTime = time.time()
    solution = run()
    duration = round(time.time() - startTime, 5)
    logger.add_problem(
        solution, problem_id=problem_id, duration=duration, language="Python"
    )
    print(f"\nThe script took {round(duration, 2)} seconds.")
